MacroName CopyFunctions

# These values need to be updated before testing
CopySource = G:\old\
CopyTarget = Y:\TEMXCopy\
TargetDirName = 0917
# Test the functions without side effects:
CallFunction CopyFunctions::CheckSpaceForCopyDir
OKBox $CheckSpaceSucceeded


# Test with major side effects:
# CallFunction CopyFunctions::CopyDir

# Set TargetDirName, CopyTarget and CopySource before calling this with no arguments.
# Checks to make sure there is enough space, then copies the contents CopySource recursively to CopyTarget.
# To copy a directory called C:/whatever to Z:/stuff/whatever you would have to set CopyTarget to Z:/stuff/ and TargetDirName to whatever
Function CopyDir 0 0
   Try
      CallFunction CopyFunctionsV2::CopyDir
   Catch
      CallFunction Notifications::SendMessage CopyFunctionsV2 failed on $ScopeName. Using old version
      CallFunction CopyFunctions::CheckSpaceForCopyDir
      If $CheckSpaceSucceeded == 1
         CallFunction CopyFunctions::CopyDirWithoutCheckingSpace
      Else
         CallFunction Notifications::SendMessage Failed to auto-copy $CopySource from $ScopeName
      Endif
   EndTry
EndFunction

# INTERNAL, called by CopyDir
# Sets CheckSpaceSucceeded to 1 if there is enough space to copy the given directory.
Function CheckSpaceForCopyDir 0 0
   CheckSpaceSucceeded = 0

   # Sometimes this fails because cmd is slow and SerialEM doesn't wait for it
   Try
      # Check the size and units of CopySource (using s flag for recursive file size)
      RunInShell dir /-c /-s $CopySource > output.txt
      ReadStringsFromFile output output.txt
      output = $output[$#output-1]
      CallFunction StringTools::Tokenize $output
      SourceSize = $Tokens[3]
      SourceUnits = $Tokens[4]
   
      # Check the remaining space and units of CopyTarget
      RunInShell dir  /-c $CopyTarget > output.txt
      ReadStringsFromFile output output.txt
      output = $output[$#output]
      CallFunction StringTools::Tokenize $output
      TargetSpace = $Tokens[3]
      TargetUnits = $Tokens[4]

      # dir should always output both sizes in bytes, but we sanity check it just to be safe. 
      # If they are ever not the same, conversion will have to be implemented
      String1 = $SourceUnits
      String2 = $TargetUnits
      CallFunction StringTools::StringEquals
      If $ReportedValue1 == 1
         If $SourceSize < $TargetSpace
            Echo There is space to copy $SourceSize $SourceUnits into $TargetSpace $TargetUnits
            CheckSpaceSucceeded = 1
         Endif
      Else
         CallFunction Notifications::SendMessage For some reason, CheckSpace units were $SourceUnits and $TargetUnits
      Endif
   Catch
      CallFunction Notifications::SendMessage For some reason, failed to check space for automatic copy from $ScopeName
   EndTry
EndFunction

# INTERNAL helper function that copies a directory to CopyTarget without checking for space first.
# (External-use functions all check before calling this one)
Function CopyDirWithoutCheckingSpace 0 0
   RunInShell xcopy $CopySource $CopyTarget\$TargetDirName\ /S
   If $ReportedValue1 != 0
      CallFunction Notifications::SendMessage Automatically copying $CopySource from $ScopeName failed!
   EndIf
EndFunction